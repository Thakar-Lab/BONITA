import subprocess

def runAllNodes(nodeList, indy, newSSS, params, model,KOlist, KIlist):
    #all arguments except nodeList are names of pickle files
    for node in list(nodeList):
        shellHandle=open(str(name)+"_localSearch.sh", "w+")
        slurmCommands=str("#!/bin/sh\n#SBATCH --partition=standard\n#SBATCH -J "+name+"\n#SBATCH -o "+name+".log\n#SBATCH -t 10:00:00\n#SBATCH -n 1\n#SBATCH -c 1\n#SBATCH --mem=120G\nmodule load intelpython/2.7.12\nmake\npython parallel_local_search.py "+str(node)+str(model)+str(indy)+str(newSSS)+str(params)+str(KOlist)+str(KIlist))
        shellHandle.write(slurmCommands)
        shellHandle.close()
        shellCommand=name+"_scoreNodes.sh"
        print([shellCommand])
        p = subprocess.Popen(['sbatch', shellCommand])


def localSearch(model, indy, newSSS, params, KOlist, KIlist, boolC):

    #INSERT CODE TO GENERATE PICKLES FOR INPUT TO runAllNodes

    runAllNodes(nodeList, indy, newSSS, params, model,KOlist, KIlist)

    #REWRITE TO PROCESS OUTPUTS
    #TODO: unpack all pickles generated by the processes spawned by runAllNodes

	equivs=[]
	individual=[]
	devs=[]
	for output in outputs:
		individual.extend(output[0])
		equivs.append(output[1])
		devs.append(output[2])
	return individual, equivs, devs